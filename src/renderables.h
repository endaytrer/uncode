
#ifndef _RENDERABLES_H
#define _RENDERABLES_H

/* GENERATED BY generate_renderables.py */
#include <stddef.h>

typedef struct {
    float position[2];
    float size[2];
    float uv_offset_x;
    float uv_size[2];
    float fg_color[3];
} Glyph;

#define FILL_ATTR_GLYPH() \
do {\
    glVertexAttribPointer( \
        0, \
        sizeof(((Glyph *)NULL)->position) / sizeof(float), \
        GL_FLOAT, \
        GL_FALSE, \
        sizeof(Glyph), \
        (void *)offsetof(Glyph, position)\
    ); \
    glEnableVertexAttribArray(0); \
    glVertexAttribDivisor(0, 1); \
    glVertexAttribPointer( \
        1, \
        sizeof(((Glyph *)NULL)->size) / sizeof(float), \
        GL_FLOAT, \
        GL_FALSE, \
        sizeof(Glyph), \
        (void *)offsetof(Glyph, size)\
    ); \
    glEnableVertexAttribArray(1); \
    glVertexAttribDivisor(1, 1); \
    glVertexAttribPointer( \
        2, \
        sizeof(((Glyph *)NULL)->uv_offset_x) / sizeof(float), \
        GL_FLOAT, \
        GL_FALSE, \
        sizeof(Glyph), \
        (void *)offsetof(Glyph, uv_offset_x)\
    ); \
    glEnableVertexAttribArray(2); \
    glVertexAttribDivisor(2, 1); \
    glVertexAttribPointer( \
        3, \
        sizeof(((Glyph *)NULL)->uv_size) / sizeof(float), \
        GL_FLOAT, \
        GL_FALSE, \
        sizeof(Glyph), \
        (void *)offsetof(Glyph, uv_size)\
    ); \
    glEnableVertexAttribArray(3); \
    glVertexAttribDivisor(3, 1); \
    glVertexAttribPointer( \
        4, \
        sizeof(((Glyph *)NULL)->fg_color) / sizeof(float), \
        GL_FLOAT, \
        GL_FALSE, \
        sizeof(Glyph), \
        (void *)offsetof(Glyph, fg_color)\
    ); \
    glEnableVertexAttribArray(4); \
    glVertexAttribDivisor(4, 1); \
} while (0)

typedef struct {
    float position[2];
    float size[2];
    float color[4];
} Rect;

#define FILL_ATTR_RECT() \
do {\
    glVertexAttribPointer( \
        0, \
        sizeof(((Rect *)NULL)->position) / sizeof(float), \
        GL_FLOAT, \
        GL_FALSE, \
        sizeof(Rect), \
        (void *)offsetof(Rect, position)\
    ); \
    glEnableVertexAttribArray(0); \
    glVertexAttribDivisor(0, 1); \
    glVertexAttribPointer( \
        1, \
        sizeof(((Rect *)NULL)->size) / sizeof(float), \
        GL_FLOAT, \
        GL_FALSE, \
        sizeof(Rect), \
        (void *)offsetof(Rect, size)\
    ); \
    glEnableVertexAttribArray(1); \
    glVertexAttribDivisor(1, 1); \
    glVertexAttribPointer( \
        2, \
        sizeof(((Rect *)NULL)->color) / sizeof(float), \
        GL_FLOAT, \
        GL_FALSE, \
        sizeof(Rect), \
        (void *)offsetof(Rect, color)\
    ); \
    glEnableVertexAttribArray(2); \
    glVertexAttribDivisor(2, 1); \
} while (0)

extern unsigned char shaders_glyph_frag_glsl[];
extern unsigned int shaders_glyph_frag_glsl_len;

extern unsigned char shaders_glyph_vert_glsl[];
extern unsigned int shaders_glyph_vert_glsl_len;

extern unsigned char shaders_rect_vert_glsl[];
extern unsigned int shaders_rect_vert_glsl_len;

extern unsigned char shaders_rect_frag_glsl[];
extern unsigned int shaders_rect_frag_glsl_len;


#endif // _RENDERABLES_H
